package week11;
import java.util.Arrays;

/**
 *  Merge sort implementation which is able to be observed through its
 *  Sorter superclass.
 *
 * @author Iain Hewson
 */
public class MergeSort extends Sorter {

    /**
     *  Create a new SillySort sorter with the given integers to sort.
     * 
     * @param nums the integers to sort.
     */
    public MergeSort(Integer[] nums) {
        super(nums); // pass nums[] to the superclass Sort
    }

    /**
     * Sort the integers (which are stored in the parent Sorter class). 
     */
    public void sortNums() {
        // int i, j, comparisons, and nums[] are all protected datafields in
        // the superclass Sort so we can use them without declaring them
        comparisons = 0;
        mergeSort(0, nums.length-1);  
    }

    /**
     * Recursively sort halves of the array.
     * @param left first value
     * @param right last value
     */
    public void mergeSort(int left, int right) {
        if(left < right) {
            //  if(right-left <= 1) return;
        
        int mid = (left + right)/2;
        mergeSort(left, mid);
        mergeSort(mid+1, right);
        merge(left, mid+1, right);
         }
          return;

    }

    public void merge(int left, int mid, int right) {
        Integer[] temp = Arrays.copyOf(nums, nums.length);   

        i = left;
        j = left;
        int k = mid;

        while(i < mid && k <= right) {
            comparisons++;
            if (temp[i] < temp[k]) {
                nums[j++] = temp[i++];
                update();
                    
            } else {
                nums[j++] = temp[k++];
                update();
            }
        }

        while(i < mid) {
            comparisons++;
            nums[j++] = temp[i++];
            update();
        }

        while(j <= right) {
            comparisons++;
            nums[j++] = temp[k++];
            update();
        }
    }
}
